import React, { useState, useEffect } from 'react';
import './Options.css';
import Fuse from 'fuse.js'
import CodeCard from './CodeCard'

interface Props {
  title: string;
}

const options = {
  // isCaseSensitive: false,
  // includeScore: false,
  // shouldSort: true,
  // includeMatches: false,
  // findAllMatches: false,
  // minMatchCharLength: 1,
  // location: 0,
  // threshold: 0.6,
  // distance: 100,
  // useExtendedSearch: false,
  // ignoreLocation: false,
  // ignoreFieldNorm: false,
  keys: [
    "code",
    "explanation"
  ]
};

// start out empty
let explanations: any = []
let fuse = new Fuse(explanations, options);
let allExplanations: any = []


/*
This code is checking if the "explanations" key exists in the local storage and if it does, 
it will create a new Fuse object with that value.
- generated by stenography ðŸ¤–
*/
chrome.storage.local.get("explanations", function (result) {
  if (result["explanations"]) {
    explanations = result["explanations"]
    fuse = new Fuse(explanations, options);
  }
});

// chrome.runtime.sendMessage({ greeting: searchTerm }, function (response) {
//   console.log(response);
// });

const searchFuse = (searchTerm: string): any => {
  if (searchTerm.length === 0) return allExplanations
  return fuse.search(searchTerm)
}

const Options: React.FC<Props> = ({ title }: Props) => {
  const [searchResults, setSearchResults] = useState([]);
  const [apiKey, setApiKey] = useState('');
  const listItems = searchResults.map((searchResult: any) => {
    if ("item" in searchResult) {
      console.log(JSON.stringify(searchResult.item.code))
      return <li>
        <CodeCard code={searchResult.item.code} explanation={searchResult.item.explanation} />
      </li>
    } else {
      return <li>
        <CodeCard code={searchResult.code} explanation={searchResult.explanation} />
      </li>
    }

  }

  );

  useEffect(() => {
    chrome.storage.local.get("explanations", function (result) {
      if (result["explanations"]) {
        explanations = result["explanations"]
        allExplanations = result["explanations"]
        fuse = new Fuse(explanations, options);
        // setSearchTerm(JSON.stringify(explanations))
        setSearchResults(explanations)
      }
    })
  }, [])
  return <div className="OptionsContainer">{title.toUpperCase()} PAGE
    <br />
    <input type="text" placeholder="Search" onChange={evt => setSearchResults(searchFuse(evt.target.value))} />
    <ul>{listItems}</ul>
    <CodeCard code={`const answer = async (code, query) => {
    const gptResponse = await openai.answers({
        "documents": DOCUMENTS,
        "question": \`\${code}\\n\\n\${query}\`,
        "search_model": SEARCH_MODEL,
        "model": MODEL,
        "examples_context": EXAMPLES_CONTEXT,
        "examples": EXAMPLES,
        "max_tokens": 50,
        "stop": ["\n", "<|endoftext|>"],
    });

    console.log(gptResponse.data);
}`} explanation="This is the code that is being run in the background" />
  </div>;
};

export default Options;
